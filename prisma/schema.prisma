// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Post {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  title     String   @db.VarChar(255)
  content   String?
  published Boolean  @default(false)
  author    User     @relation(fields: [authorId], references: [id])
  authorId  String
}

enum Role {
  USER
  MANAGER
  EMPLOYEE
  DB_ADMIN
}

model User {
  id                            String   @id @default(uuid())
  email                         String    @unique
  emailVerified                 Boolean   @default(false)
  emailVerificationToken        String? @unique
  emailVerificationTokenExpires DateTime? @default(now())

  username String 
  role    Role    @default(USER) 
  password                  String
  passwordResetToken        String?   @unique
  passwordResetTokenExpires DateTime? 
  refreshToken              String?
  currentChallenge String?
  webAuthenToken Boolean @default(false)
  
  failedLoginAttempts Int? @default(0)
  accountLockedUntil DateTime?
  accountBalance Float @default(0)

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  authenticators Authenticator[]
  updates   Update[]
  Post      Post[]
  Product   Product[]
  accounts Account[]
}


model Account {
  id        Int      @id @default(autoincrement())
  userId    String
  name      String   @db.VarChar(4096)
  accountNumber    String   @unique @db.VarChar(255)
  maskedAccountNumber String @db.VarChar(255)
  balance Int @default(0)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id])

  @@index([accountNumber], name: "number")
}


// webauthen
model Authenticator{
  credentialId Bytes @id
  credentialPublicKey Bytes
  counter BigInt @default(autoincrement())
  credentialDeviceType String
  credentialBackedUp Boolean
  transports String[]
  userId                String
  user                  User     @relation(fields: [userId], references: [id])
}

model Product {
  id          String   @id @default(uuid())
  createdAt   DateTime @default(now())
  name        String
  belongsTo   User     @relation(fields: [belongsToId], references: [id])
  belongsToId String
  updates     Update[]
}


enum UPDATE_STATUS {
  IN_PROGRESS
  LIVE
  DEPRECATED
  ARCHIVED
}

model Update {
   id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  title   String        @db.VarChar(255)
  body    String
  status  UPDATE_STATUS @default(IN_PROGRESS)
  version String?
  asset   String

  productId    String
  product      Product       @relation(fields: [productId], references: [id])
  updatePoints UpdatePoint[]
  User         User?         @relation(fields: [userId], references: [id])
  userId       String?
}

model UpdatePoint {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime

  name        String @db.VarChar(255)
  description String

  updateId String
  update   Update @relation(fields: [updateId], references: [id])
}
